version: 2

jobs:
  install:
    docker:
      # specify the version you desire here
      - image: circleci/node:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: npm i

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

  lint:
    docker:
      # specify the version you desire here
      - image: circleci/node:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    steps:
      # run tests!
      - run: ./node_modules/.bin/ng lint

  test:
    docker:
      # specify the version you desire here
      - image: circleci/node:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    steps:
      - run: ./node_modules/.bin/ng test --sourcemaps=false --single-run

  deploy-dev:
    docker:
      # specify the version you desire here
      - image: circleci/node:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: npm i

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

    deployment:
      # production:
      #   branch: master
      #   commands:
      #     - ng build --prod
      #     - firebase use production
      #     - firebase deploy --token=$FIREBASE_TOKEN --non-interactive
      dev:
        branch: master
        commands:
          - ./node_modules/.bin/ng build --prod -e=dev
          - ./node_modules/.bin/firebase use staging
          - ./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN --non-interactive

  deploy-prod:
    docker:
      # specify the version you desire here
      - image: circleci/node:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: npm i

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

    deployment:
      production:
        branch: master
        commands:
          - ./node_modules/.bin/ng build --prod
          - ./node_modules/.bin/firebase use production
          - ./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN --non-interactive

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - install
      - lint
          requires:
            - install
      - test
          requires:
            - install
      - deploy-dev
         filters:
            branches:
              only:
                - master
         requires:
           - lint
           - test
      - hold:
         type: approval
         filters:
            branches:
              only:
                - master
         requires:
           - deploy-dev
      - deploy-prod
         filters:
            branches:
              only:
                - master
         requires:
           - hold